{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Git Flow Manager (GFM)","text":"<p>GFM is a tool designed to assist with implementation programatically of the <code>gitflow</code> approach to version control. This tool provides a set of commands to help you manage your git repositories in a more structured way and is designed to be used in conjunction with a local install of <code>git</code> and wrapped by LLM (Large Language Model) tools.</p> <p>For full documentation, see the API Reference.</p> <p></p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>gfm<ul> <li>base</li> </ul> </li> </ul>"},{"location":"reference/gfm/","title":"gfm","text":"<p>Package for the GFM project.</p>"},{"location":"reference/gfm/#gfm.GitFlowManager","title":"<code>GitFlowManager</code>","text":"<p>A class to manage a Git repository using a GitFlow approach. Facilitates feature, release, and hotfix branches along with standard repository management tasks.</p> <p>This implementation interacts directly with the Git command-line interface (CLI) and supports operations such as branch creation, deletion, merges, and tagging according to GitFlow methodology.</p> <p>Attributes:</p> Name Type Description <code>repo_path</code> <code>Path</code> <p>The path to the Git repository.</p> Example <pre><code>manager = GitFlowManager(repo_path=\"path/to/repo\")\nmanager.init()\nmanager.create_feature_branch(\"feature/my-new-feature\")\n</code></pre> Source code in <code>src/gfm/base.py</code> <pre><code>class GitFlowManager:\n    \"\"\"\n    A class to manage a Git repository using a GitFlow approach. Facilitates feature, release, and hotfix branches\n    along with standard repository management tasks.\n\n    This implementation interacts directly with the Git command-line interface (CLI) and supports operations\n    such as branch creation, deletion, merges, and tagging according to GitFlow methodology.\n\n    Attributes:\n        repo_path (Path): The path to the Git repository.\n\n    Example:\n        ```python\n        manager = GitFlowManager(repo_path=\"path/to/repo\")\n        manager.init()\n        manager.create_feature_branch(\"feature/my-new-feature\")\n        ```\n\n    &lt;!-- Example Test:\n    &gt;&gt;&gt; manager = GitFlowManager(repo_path=\"path/to/repo\")\n    &gt;&gt;&gt; manager.init()\n    &gt;&gt;&gt; assert manager.get_current_branch() == \"main\"\n    --&gt;\n    \"\"\"\n\n    def __init__(self, repo_path: str):\n        \"\"\"\n        Initializes the GitFlowManager with the path to the Git repository.\n\n        Args:\n            repo_path (str): Path to the Git repository.\n        \"\"\"\n        self.repo_path = Path(repo_path)\n\n    def _run_git_command(self, *args: str) -&gt; str:\n        \"\"\"\n        Run a Git command in the repository and return the output.\n\n        Args:\n            *args (str): Git command arguments.\n\n        Returns:\n            str: The output of the Git command.\n        \"\"\"\n        result = subprocess.run(\n            [\"git\", \"-C\", str(self.repo_path), *args],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n        return result.stdout.strip()\n\n    def init(self) -&gt; None:\n        \"\"\"\n        Initializes a Git repository at the specified path if not already initialized.\n\n        Checks if the `.git` directory exists; if it does, no action is taken.\n        Otherwise, initializes a new Git repository.\n\n        Raises:\n            RuntimeError: If Git initialization fails or if the directory does not exist.\n        \"\"\"\n        if not self.repo_path.exists():\n            raise RuntimeError(f\"Repository path '{self.repo_path}' does not exist.\")\n\n        # Check if .git directory exists to confirm if the repo is already initialized\n        git_dir = self.repo_path / \".git\"\n        if git_dir.exists():\n            print(f\"Repository already initialized at {self.repo_path}\")\n        else:\n            try:\n                self._run_git_command(\"init\")\n                print(f\"Initialized a new Git repository at {self.repo_path}\")\n            except subprocess.CalledProcessError as e:\n                raise RuntimeError(f\"Failed to initialize git repository: {e}\")\n\n    def get_current_branch(self) -&gt; str:\n        \"\"\"\n        Returns the name of the current branch.\n\n        Returns:\n            str: The current branch name.\n        \"\"\"\n        return self._run_git_command(\"rev-parse\", \"--abbrev-ref\", \"HEAD\")\n\n    def create_branch(self, branch_name: str) -&gt; None:\n        \"\"\"\n        Creates a new branch.\n\n        Args:\n            branch_name (str): The name of the branch to create.\n        \"\"\"\n        self._run_git_command(\"checkout\", \"-b\", branch_name)\n\n    def delete_branch(self, branch_name: str, force: bool = False) -&gt; None:\n        \"\"\"\n        Deletes a branch.\n\n        Args:\n            branch_name (str): The name of the branch to delete.\n            force (bool): Whether to force delete the branch.\n        \"\"\"\n        args = [\"branch\", \"-d\" if not force else \"-D\", branch_name]\n        self._run_git_command(*args)\n\n    def create_feature_branch(self, feature_name: str) -&gt; None:\n        \"\"\"\n        Creates a feature branch.\n\n        Args:\n            feature_name (str): The name of the feature branch.\n        \"\"\"\n        self.create_branch(f\"feature/{feature_name}\")\n\n    def create_release_branch(self, version: str) -&gt; None:\n        \"\"\"\n        Creates a release branch.\n\n        Args:\n            version (str): The version tag for the release.\n        \"\"\"\n        self.create_branch(f\"release/{version}\")\n\n    def create_hotfix_branch(self, hotfix_name: str) -&gt; None:\n        \"\"\"\n        Creates a hotfix branch.\n\n        Args:\n            hotfix_name (str): The name of the hotfix branch.\n        \"\"\"\n        self.create_branch(f\"hotfix/{hotfix_name}\")\n\n    def merge_branch(self, branch_name: str) -&gt; None:\n        \"\"\"\n        Merges a specified branch into the current branch.\n\n        Args:\n            branch_name (str): The name of the branch to merge.\n\n        Raises:\n            RuntimeError: If the merge operation fails.\n        \"\"\"\n        try:\n            self._run_git_command(\"merge\", branch_name)\n        except subprocess.CalledProcessError as e:\n            raise RuntimeError(f\"Failed to merge branch '{branch_name}': {e}\")\n\n    def create_tag(self, tag_name: str, message: Optional[str] = None) -&gt; None:\n        \"\"\"\n        Creates a tag for the current commit.\n\n        Args:\n            tag_name (str): The name of the tag.\n            message (Optional[str]): Tag message for annotated tags.\n        \"\"\"\n        if message:\n            self._run_git_command(\"tag\", \"-a\", tag_name, \"-m\", message)\n        else:\n            self._run_git_command(\"tag\", tag_name)\n\n    def push(\n        self,\n        remote: str = \"origin\",\n        branch_name: Optional[str] = None,\n        tags: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        Pushes a branch or tags to the remote repository.\n\n        Args:\n            remote (str): The remote repository name (default: \"origin\").\n            branch_name (Optional[str]): The branch to push (default: current branch).\n            tags (bool): Whether to push all tags.\n        \"\"\"\n        args = [\"push\", remote]\n        if branch_name:\n            args.append(branch_name)\n        if tags:\n            args.append(\"--tags\")\n        self._run_git_command(*args)\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.__init__","title":"<code>__init__(repo_path)</code>","text":"<p>Initializes the GitFlowManager with the path to the Git repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_path</code> <code>str</code> <p>Path to the Git repository.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def __init__(self, repo_path: str):\n    \"\"\"\n    Initializes the GitFlowManager with the path to the Git repository.\n\n    Args:\n        repo_path (str): Path to the Git repository.\n    \"\"\"\n    self.repo_path = Path(repo_path)\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.create_branch","title":"<code>create_branch(branch_name)</code>","text":"<p>Creates a new branch.</p> <p>Parameters:</p> Name Type Description Default <code>branch_name</code> <code>str</code> <p>The name of the branch to create.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def create_branch(self, branch_name: str) -&gt; None:\n    \"\"\"\n    Creates a new branch.\n\n    Args:\n        branch_name (str): The name of the branch to create.\n    \"\"\"\n    self._run_git_command(\"checkout\", \"-b\", branch_name)\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.create_feature_branch","title":"<code>create_feature_branch(feature_name)</code>","text":"<p>Creates a feature branch.</p> <p>Parameters:</p> Name Type Description Default <code>feature_name</code> <code>str</code> <p>The name of the feature branch.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def create_feature_branch(self, feature_name: str) -&gt; None:\n    \"\"\"\n    Creates a feature branch.\n\n    Args:\n        feature_name (str): The name of the feature branch.\n    \"\"\"\n    self.create_branch(f\"feature/{feature_name}\")\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.create_hotfix_branch","title":"<code>create_hotfix_branch(hotfix_name)</code>","text":"<p>Creates a hotfix branch.</p> <p>Parameters:</p> Name Type Description Default <code>hotfix_name</code> <code>str</code> <p>The name of the hotfix branch.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def create_hotfix_branch(self, hotfix_name: str) -&gt; None:\n    \"\"\"\n    Creates a hotfix branch.\n\n    Args:\n        hotfix_name (str): The name of the hotfix branch.\n    \"\"\"\n    self.create_branch(f\"hotfix/{hotfix_name}\")\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.create_release_branch","title":"<code>create_release_branch(version)</code>","text":"<p>Creates a release branch.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>The version tag for the release.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def create_release_branch(self, version: str) -&gt; None:\n    \"\"\"\n    Creates a release branch.\n\n    Args:\n        version (str): The version tag for the release.\n    \"\"\"\n    self.create_branch(f\"release/{version}\")\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.create_tag","title":"<code>create_tag(tag_name, message=None)</code>","text":"<p>Creates a tag for the current commit.</p> <p>Parameters:</p> Name Type Description Default <code>tag_name</code> <code>str</code> <p>The name of the tag.</p> required <code>message</code> <code>Optional[str]</code> <p>Tag message for annotated tags.</p> <code>None</code> Source code in <code>src/gfm/base.py</code> <pre><code>def create_tag(self, tag_name: str, message: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Creates a tag for the current commit.\n\n    Args:\n        tag_name (str): The name of the tag.\n        message (Optional[str]): Tag message for annotated tags.\n    \"\"\"\n    if message:\n        self._run_git_command(\"tag\", \"-a\", tag_name, \"-m\", message)\n    else:\n        self._run_git_command(\"tag\", tag_name)\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.delete_branch","title":"<code>delete_branch(branch_name, force=False)</code>","text":"<p>Deletes a branch.</p> <p>Parameters:</p> Name Type Description Default <code>branch_name</code> <code>str</code> <p>The name of the branch to delete.</p> required <code>force</code> <code>bool</code> <p>Whether to force delete the branch.</p> <code>False</code> Source code in <code>src/gfm/base.py</code> <pre><code>def delete_branch(self, branch_name: str, force: bool = False) -&gt; None:\n    \"\"\"\n    Deletes a branch.\n\n    Args:\n        branch_name (str): The name of the branch to delete.\n        force (bool): Whether to force delete the branch.\n    \"\"\"\n    args = [\"branch\", \"-d\" if not force else \"-D\", branch_name]\n    self._run_git_command(*args)\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.get_current_branch","title":"<code>get_current_branch()</code>","text":"<p>Returns the name of the current branch.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The current branch name.</p> Source code in <code>src/gfm/base.py</code> <pre><code>def get_current_branch(self) -&gt; str:\n    \"\"\"\n    Returns the name of the current branch.\n\n    Returns:\n        str: The current branch name.\n    \"\"\"\n    return self._run_git_command(\"rev-parse\", \"--abbrev-ref\", \"HEAD\")\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.init","title":"<code>init()</code>","text":"<p>Initializes a Git repository at the specified path if not already initialized.</p> <p>Checks if the <code>.git</code> directory exists; if it does, no action is taken. Otherwise, initializes a new Git repository.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If Git initialization fails or if the directory does not exist.</p> Source code in <code>src/gfm/base.py</code> <pre><code>def init(self) -&gt; None:\n    \"\"\"\n    Initializes a Git repository at the specified path if not already initialized.\n\n    Checks if the `.git` directory exists; if it does, no action is taken.\n    Otherwise, initializes a new Git repository.\n\n    Raises:\n        RuntimeError: If Git initialization fails or if the directory does not exist.\n    \"\"\"\n    if not self.repo_path.exists():\n        raise RuntimeError(f\"Repository path '{self.repo_path}' does not exist.\")\n\n    # Check if .git directory exists to confirm if the repo is already initialized\n    git_dir = self.repo_path / \".git\"\n    if git_dir.exists():\n        print(f\"Repository already initialized at {self.repo_path}\")\n    else:\n        try:\n            self._run_git_command(\"init\")\n            print(f\"Initialized a new Git repository at {self.repo_path}\")\n        except subprocess.CalledProcessError as e:\n            raise RuntimeError(f\"Failed to initialize git repository: {e}\")\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.merge_branch","title":"<code>merge_branch(branch_name)</code>","text":"<p>Merges a specified branch into the current branch.</p> <p>Parameters:</p> Name Type Description Default <code>branch_name</code> <code>str</code> <p>The name of the branch to merge.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the merge operation fails.</p> Source code in <code>src/gfm/base.py</code> <pre><code>def merge_branch(self, branch_name: str) -&gt; None:\n    \"\"\"\n    Merges a specified branch into the current branch.\n\n    Args:\n        branch_name (str): The name of the branch to merge.\n\n    Raises:\n        RuntimeError: If the merge operation fails.\n    \"\"\"\n    try:\n        self._run_git_command(\"merge\", branch_name)\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(f\"Failed to merge branch '{branch_name}': {e}\")\n</code></pre>"},{"location":"reference/gfm/#gfm.GitFlowManager.push","title":"<code>push(remote='origin', branch_name=None, tags=False)</code>","text":"<p>Pushes a branch or tags to the remote repository.</p> <p>Parameters:</p> Name Type Description Default <code>remote</code> <code>str</code> <p>The remote repository name (default: \"origin\").</p> <code>'origin'</code> <code>branch_name</code> <code>Optional[str]</code> <p>The branch to push (default: current branch).</p> <code>None</code> <code>tags</code> <code>bool</code> <p>Whether to push all tags.</p> <code>False</code> Source code in <code>src/gfm/base.py</code> <pre><code>def push(\n    self,\n    remote: str = \"origin\",\n    branch_name: Optional[str] = None,\n    tags: bool = False,\n) -&gt; None:\n    \"\"\"\n    Pushes a branch or tags to the remote repository.\n\n    Args:\n        remote (str): The remote repository name (default: \"origin\").\n        branch_name (Optional[str]): The branch to push (default: current branch).\n        tags (bool): Whether to push all tags.\n    \"\"\"\n    args = [\"push\", remote]\n    if branch_name:\n        args.append(branch_name)\n    if tags:\n        args.append(\"--tags\")\n    self._run_git_command(*args)\n</code></pre>"},{"location":"reference/gfm/base/","title":"base","text":"<p>Core implementation of GitFlowManager, can be used directly or wrapped by LLM tools.</p>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager","title":"<code>GitFlowManager</code>","text":"<p>A class to manage a Git repository using a GitFlow approach. Facilitates feature, release, and hotfix branches along with standard repository management tasks.</p> <p>This implementation interacts directly with the Git command-line interface (CLI) and supports operations such as branch creation, deletion, merges, and tagging according to GitFlow methodology.</p> <p>Attributes:</p> Name Type Description <code>repo_path</code> <code>Path</code> <p>The path to the Git repository.</p> Example <pre><code>manager = GitFlowManager(repo_path=\"path/to/repo\")\nmanager.init()\nmanager.create_feature_branch(\"feature/my-new-feature\")\n</code></pre> Source code in <code>src/gfm/base.py</code> <pre><code>class GitFlowManager:\n    \"\"\"\n    A class to manage a Git repository using a GitFlow approach. Facilitates feature, release, and hotfix branches\n    along with standard repository management tasks.\n\n    This implementation interacts directly with the Git command-line interface (CLI) and supports operations\n    such as branch creation, deletion, merges, and tagging according to GitFlow methodology.\n\n    Attributes:\n        repo_path (Path): The path to the Git repository.\n\n    Example:\n        ```python\n        manager = GitFlowManager(repo_path=\"path/to/repo\")\n        manager.init()\n        manager.create_feature_branch(\"feature/my-new-feature\")\n        ```\n\n    &lt;!-- Example Test:\n    &gt;&gt;&gt; manager = GitFlowManager(repo_path=\"path/to/repo\")\n    &gt;&gt;&gt; manager.init()\n    &gt;&gt;&gt; assert manager.get_current_branch() == \"main\"\n    --&gt;\n    \"\"\"\n\n    def __init__(self, repo_path: str):\n        \"\"\"\n        Initializes the GitFlowManager with the path to the Git repository.\n\n        Args:\n            repo_path (str): Path to the Git repository.\n        \"\"\"\n        self.repo_path = Path(repo_path)\n\n    def _run_git_command(self, *args: str) -&gt; str:\n        \"\"\"\n        Run a Git command in the repository and return the output.\n\n        Args:\n            *args (str): Git command arguments.\n\n        Returns:\n            str: The output of the Git command.\n        \"\"\"\n        result = subprocess.run(\n            [\"git\", \"-C\", str(self.repo_path), *args],\n            capture_output=True,\n            text=True,\n            check=True,\n        )\n        return result.stdout.strip()\n\n    def init(self) -&gt; None:\n        \"\"\"\n        Initializes a Git repository at the specified path if not already initialized.\n\n        Checks if the `.git` directory exists; if it does, no action is taken.\n        Otherwise, initializes a new Git repository.\n\n        Raises:\n            RuntimeError: If Git initialization fails or if the directory does not exist.\n        \"\"\"\n        if not self.repo_path.exists():\n            raise RuntimeError(f\"Repository path '{self.repo_path}' does not exist.\")\n\n        # Check if .git directory exists to confirm if the repo is already initialized\n        git_dir = self.repo_path / \".git\"\n        if git_dir.exists():\n            print(f\"Repository already initialized at {self.repo_path}\")\n        else:\n            try:\n                self._run_git_command(\"init\")\n                print(f\"Initialized a new Git repository at {self.repo_path}\")\n            except subprocess.CalledProcessError as e:\n                raise RuntimeError(f\"Failed to initialize git repository: {e}\")\n\n    def get_current_branch(self) -&gt; str:\n        \"\"\"\n        Returns the name of the current branch.\n\n        Returns:\n            str: The current branch name.\n        \"\"\"\n        return self._run_git_command(\"rev-parse\", \"--abbrev-ref\", \"HEAD\")\n\n    def create_branch(self, branch_name: str) -&gt; None:\n        \"\"\"\n        Creates a new branch.\n\n        Args:\n            branch_name (str): The name of the branch to create.\n        \"\"\"\n        self._run_git_command(\"checkout\", \"-b\", branch_name)\n\n    def delete_branch(self, branch_name: str, force: bool = False) -&gt; None:\n        \"\"\"\n        Deletes a branch.\n\n        Args:\n            branch_name (str): The name of the branch to delete.\n            force (bool): Whether to force delete the branch.\n        \"\"\"\n        args = [\"branch\", \"-d\" if not force else \"-D\", branch_name]\n        self._run_git_command(*args)\n\n    def create_feature_branch(self, feature_name: str) -&gt; None:\n        \"\"\"\n        Creates a feature branch.\n\n        Args:\n            feature_name (str): The name of the feature branch.\n        \"\"\"\n        self.create_branch(f\"feature/{feature_name}\")\n\n    def create_release_branch(self, version: str) -&gt; None:\n        \"\"\"\n        Creates a release branch.\n\n        Args:\n            version (str): The version tag for the release.\n        \"\"\"\n        self.create_branch(f\"release/{version}\")\n\n    def create_hotfix_branch(self, hotfix_name: str) -&gt; None:\n        \"\"\"\n        Creates a hotfix branch.\n\n        Args:\n            hotfix_name (str): The name of the hotfix branch.\n        \"\"\"\n        self.create_branch(f\"hotfix/{hotfix_name}\")\n\n    def merge_branch(self, branch_name: str) -&gt; None:\n        \"\"\"\n        Merges a specified branch into the current branch.\n\n        Args:\n            branch_name (str): The name of the branch to merge.\n\n        Raises:\n            RuntimeError: If the merge operation fails.\n        \"\"\"\n        try:\n            self._run_git_command(\"merge\", branch_name)\n        except subprocess.CalledProcessError as e:\n            raise RuntimeError(f\"Failed to merge branch '{branch_name}': {e}\")\n\n    def create_tag(self, tag_name: str, message: Optional[str] = None) -&gt; None:\n        \"\"\"\n        Creates a tag for the current commit.\n\n        Args:\n            tag_name (str): The name of the tag.\n            message (Optional[str]): Tag message for annotated tags.\n        \"\"\"\n        if message:\n            self._run_git_command(\"tag\", \"-a\", tag_name, \"-m\", message)\n        else:\n            self._run_git_command(\"tag\", tag_name)\n\n    def push(\n        self,\n        remote: str = \"origin\",\n        branch_name: Optional[str] = None,\n        tags: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        Pushes a branch or tags to the remote repository.\n\n        Args:\n            remote (str): The remote repository name (default: \"origin\").\n            branch_name (Optional[str]): The branch to push (default: current branch).\n            tags (bool): Whether to push all tags.\n        \"\"\"\n        args = [\"push\", remote]\n        if branch_name:\n            args.append(branch_name)\n        if tags:\n            args.append(\"--tags\")\n        self._run_git_command(*args)\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.__init__","title":"<code>__init__(repo_path)</code>","text":"<p>Initializes the GitFlowManager with the path to the Git repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_path</code> <code>str</code> <p>Path to the Git repository.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def __init__(self, repo_path: str):\n    \"\"\"\n    Initializes the GitFlowManager with the path to the Git repository.\n\n    Args:\n        repo_path (str): Path to the Git repository.\n    \"\"\"\n    self.repo_path = Path(repo_path)\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.create_branch","title":"<code>create_branch(branch_name)</code>","text":"<p>Creates a new branch.</p> <p>Parameters:</p> Name Type Description Default <code>branch_name</code> <code>str</code> <p>The name of the branch to create.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def create_branch(self, branch_name: str) -&gt; None:\n    \"\"\"\n    Creates a new branch.\n\n    Args:\n        branch_name (str): The name of the branch to create.\n    \"\"\"\n    self._run_git_command(\"checkout\", \"-b\", branch_name)\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.create_feature_branch","title":"<code>create_feature_branch(feature_name)</code>","text":"<p>Creates a feature branch.</p> <p>Parameters:</p> Name Type Description Default <code>feature_name</code> <code>str</code> <p>The name of the feature branch.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def create_feature_branch(self, feature_name: str) -&gt; None:\n    \"\"\"\n    Creates a feature branch.\n\n    Args:\n        feature_name (str): The name of the feature branch.\n    \"\"\"\n    self.create_branch(f\"feature/{feature_name}\")\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.create_hotfix_branch","title":"<code>create_hotfix_branch(hotfix_name)</code>","text":"<p>Creates a hotfix branch.</p> <p>Parameters:</p> Name Type Description Default <code>hotfix_name</code> <code>str</code> <p>The name of the hotfix branch.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def create_hotfix_branch(self, hotfix_name: str) -&gt; None:\n    \"\"\"\n    Creates a hotfix branch.\n\n    Args:\n        hotfix_name (str): The name of the hotfix branch.\n    \"\"\"\n    self.create_branch(f\"hotfix/{hotfix_name}\")\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.create_release_branch","title":"<code>create_release_branch(version)</code>","text":"<p>Creates a release branch.</p> <p>Parameters:</p> Name Type Description Default <code>version</code> <code>str</code> <p>The version tag for the release.</p> required Source code in <code>src/gfm/base.py</code> <pre><code>def create_release_branch(self, version: str) -&gt; None:\n    \"\"\"\n    Creates a release branch.\n\n    Args:\n        version (str): The version tag for the release.\n    \"\"\"\n    self.create_branch(f\"release/{version}\")\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.create_tag","title":"<code>create_tag(tag_name, message=None)</code>","text":"<p>Creates a tag for the current commit.</p> <p>Parameters:</p> Name Type Description Default <code>tag_name</code> <code>str</code> <p>The name of the tag.</p> required <code>message</code> <code>Optional[str]</code> <p>Tag message for annotated tags.</p> <code>None</code> Source code in <code>src/gfm/base.py</code> <pre><code>def create_tag(self, tag_name: str, message: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Creates a tag for the current commit.\n\n    Args:\n        tag_name (str): The name of the tag.\n        message (Optional[str]): Tag message for annotated tags.\n    \"\"\"\n    if message:\n        self._run_git_command(\"tag\", \"-a\", tag_name, \"-m\", message)\n    else:\n        self._run_git_command(\"tag\", tag_name)\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.delete_branch","title":"<code>delete_branch(branch_name, force=False)</code>","text":"<p>Deletes a branch.</p> <p>Parameters:</p> Name Type Description Default <code>branch_name</code> <code>str</code> <p>The name of the branch to delete.</p> required <code>force</code> <code>bool</code> <p>Whether to force delete the branch.</p> <code>False</code> Source code in <code>src/gfm/base.py</code> <pre><code>def delete_branch(self, branch_name: str, force: bool = False) -&gt; None:\n    \"\"\"\n    Deletes a branch.\n\n    Args:\n        branch_name (str): The name of the branch to delete.\n        force (bool): Whether to force delete the branch.\n    \"\"\"\n    args = [\"branch\", \"-d\" if not force else \"-D\", branch_name]\n    self._run_git_command(*args)\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.get_current_branch","title":"<code>get_current_branch()</code>","text":"<p>Returns the name of the current branch.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The current branch name.</p> Source code in <code>src/gfm/base.py</code> <pre><code>def get_current_branch(self) -&gt; str:\n    \"\"\"\n    Returns the name of the current branch.\n\n    Returns:\n        str: The current branch name.\n    \"\"\"\n    return self._run_git_command(\"rev-parse\", \"--abbrev-ref\", \"HEAD\")\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.init","title":"<code>init()</code>","text":"<p>Initializes a Git repository at the specified path if not already initialized.</p> <p>Checks if the <code>.git</code> directory exists; if it does, no action is taken. Otherwise, initializes a new Git repository.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If Git initialization fails or if the directory does not exist.</p> Source code in <code>src/gfm/base.py</code> <pre><code>def init(self) -&gt; None:\n    \"\"\"\n    Initializes a Git repository at the specified path if not already initialized.\n\n    Checks if the `.git` directory exists; if it does, no action is taken.\n    Otherwise, initializes a new Git repository.\n\n    Raises:\n        RuntimeError: If Git initialization fails or if the directory does not exist.\n    \"\"\"\n    if not self.repo_path.exists():\n        raise RuntimeError(f\"Repository path '{self.repo_path}' does not exist.\")\n\n    # Check if .git directory exists to confirm if the repo is already initialized\n    git_dir = self.repo_path / \".git\"\n    if git_dir.exists():\n        print(f\"Repository already initialized at {self.repo_path}\")\n    else:\n        try:\n            self._run_git_command(\"init\")\n            print(f\"Initialized a new Git repository at {self.repo_path}\")\n        except subprocess.CalledProcessError as e:\n            raise RuntimeError(f\"Failed to initialize git repository: {e}\")\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.merge_branch","title":"<code>merge_branch(branch_name)</code>","text":"<p>Merges a specified branch into the current branch.</p> <p>Parameters:</p> Name Type Description Default <code>branch_name</code> <code>str</code> <p>The name of the branch to merge.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the merge operation fails.</p> Source code in <code>src/gfm/base.py</code> <pre><code>def merge_branch(self, branch_name: str) -&gt; None:\n    \"\"\"\n    Merges a specified branch into the current branch.\n\n    Args:\n        branch_name (str): The name of the branch to merge.\n\n    Raises:\n        RuntimeError: If the merge operation fails.\n    \"\"\"\n    try:\n        self._run_git_command(\"merge\", branch_name)\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(f\"Failed to merge branch '{branch_name}': {e}\")\n</code></pre>"},{"location":"reference/gfm/base/#gfm.base.GitFlowManager.push","title":"<code>push(remote='origin', branch_name=None, tags=False)</code>","text":"<p>Pushes a branch or tags to the remote repository.</p> <p>Parameters:</p> Name Type Description Default <code>remote</code> <code>str</code> <p>The remote repository name (default: \"origin\").</p> <code>'origin'</code> <code>branch_name</code> <code>Optional[str]</code> <p>The branch to push (default: current branch).</p> <code>None</code> <code>tags</code> <code>bool</code> <p>Whether to push all tags.</p> <code>False</code> Source code in <code>src/gfm/base.py</code> <pre><code>def push(\n    self,\n    remote: str = \"origin\",\n    branch_name: Optional[str] = None,\n    tags: bool = False,\n) -&gt; None:\n    \"\"\"\n    Pushes a branch or tags to the remote repository.\n\n    Args:\n        remote (str): The remote repository name (default: \"origin\").\n        branch_name (Optional[str]): The branch to push (default: current branch).\n        tags (bool): Whether to push all tags.\n    \"\"\"\n    args = [\"push\", remote]\n    if branch_name:\n        args.append(branch_name)\n    if tags:\n        args.append(\"--tags\")\n    self._run_git_command(*args)\n</code></pre>"}]}